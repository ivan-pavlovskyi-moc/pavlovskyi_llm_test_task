import React, { useState } from 'react';
import axios from 'axios';

const App = () => {
  const [query, setQuery] = useState('');
  const [result, setResult] = useState([]);
  const [isLoading, setIsLoading] = useState(false);

  const handleQuery = async () => {
    if (isLoading) return; // –Ø–∫—â–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤–∂–µ —Ç—Ä–∏–≤–∞—î, –Ω—ñ—á–æ–≥–æ –Ω–µ —Ä–æ–±–∏–º–æ
    setIsLoading(true); // –ü–æ—á–∞—Ç–æ–∫ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
    const requestData = { text: query }; // –§–æ—Ä–º—É—î–º–æ —Ç—ñ–ª–æ –∑–∞–ø–∏—Ç—É
    console.log("üì§ –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –∑–∞–ø–∏—Ç—É:", JSON.stringify(requestData)); // –õ–æ–≥ –ø–µ—Ä–µ–¥ –∑–∞–ø–∏—Ç–æ–º

    try {
      const response = await axios.post("http://localhost:8000/query/", requestData, {
        headers: { "Content-Type": "application/json" },
      });

      console.log("‚úÖ –í—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ –±–µ–∫–µ–Ω–¥—É:", response.data); // –õ–æ–≥ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
      setResult(response.data.data || []); // –û–Ω–æ–≤–ª—é—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    } catch (error) {
      if (error.response) {
        console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ:", error.response.status, error.response.data);
      } else {
        console.error("‚ùå Axios Error:", error.message);
      }
      setResult([]); // –û—á–∏—â–∞—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —É —Ä–∞–∑—ñ –ø–æ–º–∏–ª–∫–∏
    } finally {
      setIsLoading(false); // –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
    }
  };

  return (
    <div style={styles.container}>
      <h1 style={styles.title}>Ivan Pavlovskyi Test LLM Task</h1> {/* –ó–º—ñ–Ω–µ–Ω–æ —Ç—É—Ç */}
      <div style={styles.inputContainer}>
        <label htmlFor="queryInput" style={styles.label}>
          –í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É —Å—Ç—Ä–∞–≤–∏, –¥—ñ–∞–ø–∞–∑–æ–Ω —Ü—ñ–Ω, –∫–∞–ª–æ—Ä—ñ–π–Ω—ñ—Å—Ç—å —á–∏ —Ç–∏–ø —Å—Ç—Ä–∞–≤–∏:
        </label>
        <input
          id="queryInput"
          type="text"
          value={query}
          onChange={(e) => setQuery(e.target.value)}
          placeholder="–ù–∞–ø–∏—à—ñ—Ç—å –≤–∞—à –∑–∞–ø–∏—Ç —Ç—É—Ç..."
          style={styles.input}
        />
        <button onClick={handleQuery} style={styles.button} disabled={isLoading}>
          {isLoading ? "–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è..." : "–ü–æ—à—É–∫"}
        </button>
      </div>

      {result.length > 0 ? (
        <div style={styles.tableContainer}>
          <h2 style={styles.subtitle}>–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø–æ—à—É–∫—É:</h2>
          <table style={styles.table}>
            <thead>
              <tr>
                <th style={styles.th}>–ù–∞–∑–≤–∞</th>
                <th style={styles.th}>–¢–∏–ø</th>
                <th style={styles.th}>–¶—ñ–Ω–∞ ($)</th>
                <th style={styles.th}>–ö–∞–ª–æ—Ä—ñ—ó</th>
                <th style={styles.th}>–ß–∞—Å –ø—Ä–∏–π–æ–º—É</th>
              </tr>
            </thead>
            <tbody>
              {result.map((item, index) => (
                <tr key={index} style={styles.tr}>
                  <td style={styles.td}>{item.name}</td>
                  <td style={styles.td}>{item.type}</td>
                  <td style={styles.td}>{item.price}</td>
                  <td style={styles.td}>{item.calories}</td>
                  <td style={styles.td}>{item.recommended_meal_time}</td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      ) : (
        <p style={styles.noResults}>–ù–µ–º–∞—î —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è.</p>
      )}
    </div>
  );
};

export default App;

// –°—Ç–∏–ª—ñ
const styles = {
  container: {
    display: "flex",
    flexDirection: "column",
    alignItems: "center",
    justifyContent: "center",
    padding: "20px",
    fontFamily: "Arial, sans-serif",
    backgroundColor: "#f5f5f5",
    minHeight: "100vh",
  },
  title: {
    fontSize: "2rem",
    marginBottom: "20px",
    color: "#333",
  },
  inputContainer: {
    display: "flex",
    flexDirection: "column",
    alignItems: "center",
    gap: "10px",
    marginBottom: "20px",
  },
  label: {
    fontSize: "1rem",
    color: "#555",
  },
  input: {
    padding: "10px",
    fontSize: "1rem",
    width: "300px",
    borderRadius: "5px",
    border: "1px solid #ccc",
  },
  button: {
    padding: "10px 20px",
    fontSize: "1rem",
    backgroundColor: "#007bff",
    color: "#fff",
    border: "none",
    borderRadius: "5px",
    cursor: "pointer",
  },
  buttonDisabled: {
    backgroundColor: "#ccc",
    cursor: "not-allowed",
  },
  tableContainer: {
    marginTop: "20px",
    width: "80%",
    maxWidth: "800px",
  },
  subtitle: {
    fontSize: "1.5rem",
    marginBottom: "10px",
    color: "#333",
  },
  table: {
    width: "100%",
    borderCollapse: "collapse",
    backgroundColor: "#fff",
    boxShadow: "0 0 10px rgba(0, 0, 0, 0.1)",
  },
  th: {
    padding: "12px",
    backgroundColor: "#007bff",
    color: "#fff",
    textAlign: "left",
  },
  tr: {
    borderBottom: "1px solid #ddd",
  },
  td: {
    padding: "12px",
    textAlign: "left",
  },
  noResults: {
    fontSize: "1.2rem",
    color: "#777",
    marginTop: "20px",
  },
};